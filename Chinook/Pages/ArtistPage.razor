@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Constants
@using Chinook.Services
@using Chinook.States
@using Playlist = Chinook.Models.Playlist
@inject ArtistService ArtistService;
@inject PlaylistService PlaylistService;
@inject PlaylistState PlaylistState;
@inject UserAuthenticationService UserAuthenticationService;
@inject NavigationManager NavigationManager;

@if (!string.IsNullOrWhiteSpace(_errorMessage))
{
    <div class="alert alert-danger fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @_errorMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseMessages"></button>
        </div>
    </div>
}
else if (!string.IsNullOrWhiteSpace(_infoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @_infoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseMessages"></button>
        </div>
    </div>
}

@if (_artist == null)
{
    <Loading />
}
else
{
    <h1>@_artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @if(_tracks == null)
            {
                <Loading />
            }
            else
            {
                @foreach (var track in _tracks)
                {
                    <tr>
                        <td>@track.AlbumTitle</td>
                        <td>@track.TrackName</td>
                        <td>
                            @if (track.IsFavorite)
                            {
                                <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnFavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                            }
                            else
                            {
                                <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                            }
                            <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }
    private Modal PlaylistDialog { get; set; }
    
    private Artist? _artist;
    private List<Playlist> _playlists = new ();
    private List<PlaylistTrack>? _tracks;
    private PlaylistTrack? _selectedTrack;
    private string _infoMessage = null!;
    private string _errorMessage = null!;
    private string? _currentUserId;
    
    private string _selectedPlayListName = string.Empty;
    private long _selectedPlaylistId;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        _currentUserId = UserAuthenticationService.GetUserId(AuthenticationState) ?? string.Empty;
        
        _artist = await ArtistService.GetArtistByIdAsync(ArtistId);
        
        if(_artist is null)
            NavigationManager.NavigateTo("/notfound");

        _playlists = await PlaylistService.GetPlaylistsByUserIdAsync(_currentUserId);

        _tracks = await ArtistService.GetTracksByArtistIdAsync(ArtistId, _currentUserId);
    }
    
    private async Task FavoriteTrack(long trackId)
    {
        try
        {
            var track = _tracks.FirstOrDefault(t => t.TrackId == trackId);
            await PlaylistService.FavoriteUnFavouriteTrackAsync(trackId, _currentUserId);
            PlaylistState.OnChange += StateHasChanged;
            _infoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist {PlaylistConst.Favorites}.";
        
        
            foreach (var playlistTrack in _tracks.Where(playlistTrack => playlistTrack.TrackId == trackId))
            {
                playlistTrack.IsFavorite = true;
            }
        }
        catch (Exception e)
        {
            CloseMessages();
            _errorMessage = e.Message;
        }
    }
    
    // Remove track from favorites
    private async Task UnFavoriteTrack(long trackId)
    {
        try
        {
            var track = _tracks.FirstOrDefault(t => t.TrackId == trackId);
            await PlaylistService.FavoriteUnFavouriteTrackAsync(trackId, _currentUserId);
            _infoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist {PlaylistConst.Favorites}.";
        
            foreach (var playlistTrack in _tracks.Where(playlistTrack => playlistTrack.TrackId == trackId))
            {
                playlistTrack.IsFavorite = false;
            }
        }
        catch (Exception e)
        {
            CloseMessages();
            _errorMessage = e.Message;
        }
    }

    // Open Modal for adding track to playlist
    private void OpenPlaylistDialog(long trackId)
    {
        CloseMessages();
        _selectedTrack = _tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async Task AddTrackToPlaylist()
    {
        try
        {
            if(_selectedPlayListName != string.Empty) // Create new playlist
            {
                if (!await IsPlayListAlreadyExistAsync())
                {
                    await PlaylistService.CreatePlaylistAsync(_selectedPlayListName, _currentUserId,_selectedTrack.TrackId);
                    CloseMessages();
                    _infoMessage = $"Track {_artist.Name} - {_selectedTrack.AlbumTitle} - {_selectedTrack.TrackName} added to playlist {_selectedPlayListName}.";
                }
            }
            else if (_selectedPlaylistId != default) // Add to existing playlist
            {
                var playList = await PlaylistService.AddTrackToPlayListAsync(_selectedPlaylistId, _currentUserId,_selectedTrack.TrackId);
                CloseMessages();
                _infoMessage = $"Track {_artist.Name} - {_selectedTrack.AlbumTitle} - {_selectedTrack.TrackName} added to playlist {playList.Name}.";
            }
            else
            {
                CloseMessages();
            }
            
            PlaylistDialog.Close();
        }
        catch (Exception e)
        {
            CloseMessages();
            _errorMessage = e.Message;
        }
    }
    
    
    private async Task<bool> IsPlayListAlreadyExistAsync()
    {
        var playListAvailability = await PlaylistService.IsPlayListAlreadyExistAsync(_selectedPlayListName, _currentUserId);
        if (playListAvailability)
        {
            CloseMessages();
            _errorMessage = $"Playlist {_selectedPlayListName} already exist.";
            return playListAvailability;
        }
        return playListAvailability;
    }

    private void CloseMessages()
    {
        _infoMessage = "";
        _errorMessage = "";
    }
    
    


}

<Modal @ref="PlaylistDialog" ShowCloseButton="true">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (_selectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@_artist.Name - @_selectedTrack.AlbumTitle - @_selectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind="_selectedPlaylistId" disabled="@(_playlists.Count == 0)">
                <option value="0">Select Playlist</option>
                @if(_playlists.Count == 0)
                {
                    <option value="0" disabled>No playlists available</option>
                }
                else
                {
                    @foreach (var playlist in _playlists)
                    {
                        if (playlist.PlaylistId == _selectedPlaylistId)
                        {
                            <option value="@playlist.PlaylistId" selected>@playlist.Name</option>
                        }
                        else
                        {
                            <option value="@playlist.PlaylistId">@playlist.Name</option>
                        }
                    }
                }
                
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" @bind="_selectedPlayListName" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
